[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float progress : hint_range(0.0, 0.5);
uniform float diamondPixelSize = 20f;

void fragment() {
    float xFraction = fract(FRAGCOORD.x / diamondPixelSize);
    float yFraction = fract(FRAGCOORD.y / diamondPixelSize);
	
	float xDistance = abs(xFraction - 0.5);
    float yDistance = abs(yFraction - 0.5);
    
    // We need to fill in this logic.
    if (xDistance + yDistance + UV.x   > progress * 4f) {

        discard;
    }
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/progress = 0.0
shader_param/diamondPixelSize = 20.0

[sub_resource type="Animation" id=3]
resource_name = "Trans_In"
length = 2.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Transition_In:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.5 ]
}

[node name="Transition" type="CanvasLayer"]
layer = 4

[node name="Transition_In" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Animation" type="AnimationPlayer" parent="."]
pause_mode = 1
autoplay = "Trans_In"
method_call_mode = 1
anims/Trans_In = SubResource( 3 )
[connection signal="animation_finished" from="Animation" to="Animation" method="_on_Animation_animation_finished"]
